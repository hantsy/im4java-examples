/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import org.im4java.core.ConvertCmd
import org.im4java.core.IMOperation
import org.im4java.process.Pipe
import java.awt.image.BufferedImage
import java.io.ByteArrayInputStream
import java.io.ByteArrayOutputStream
import javax.imageio.ImageIO
import java.io.File
import java.nio.file.Files
import java.nio.file.Paths

object ImageOptimizer {

    fun optimizeAndResize(inputBytes: ByteArray, resizeTo: Int = 128): ByteArray =               ByteArrayInputStream(inputBytes).use { inputStream ->
    
        // Read the input image
        val inputImage: BufferedImage = ImageIO.read(inputStream)

        // Calculate the maximum edge size
        val rawWidth = inputImage.width
        val rawHeight = inputImage.height
        val (targetWidth, targetHeight) = if (rawWidth > rawHeight) {
            resizeTo to (rawHeight / (rawWidth.toDouble() / resizeTo)).toInt()
        } else {
            (rawWidth / (rawHeight.toDouble() / resizeTo)).toInt() to resizeTo
        }
        println("original image size: $rawWidth X $rawHeight")
        println("target image size: $targetWidth X $targetHeight")

        // Create the ImageMagick command
        val cmd = ConvertCmd()
        // Prepare the operation
        val operation = IMOperation().apply {
            addImage("-") // input
            resize(800, 600)
            strip()
            addImage("jpeg:-") // output
        }

        ByteArrayOutputStream().use { outputStream -> 
            // Set the pipes
            val pipeIn = Pipe(inputStream, null)
            val pipeOut = Pipe(null, outputStream)
            cmd.setInputProvider(pipeIn)
            cmd.setOutputConsumer(pipeOut)

            // Execute the operation
            try {
                cmd.run(operation)
            } catch (e: Exception) {
                e.printStackTrace()
            }

            // Return the optimized and resized image as a byte array
            outputStream.toByteArray()
        }
    }
}

fun main() {
    val inputBytes = Files.readAllBytes(Paths.get("test.jpg"))
    println("input test file: ${inputBytes.size}")
    val result = ImageOptimizer.optimizeAndResize(inputBytes)
 
    val file = File("out.jpg")
    Files.write(file.toPath(), result)
    println("output file: ${file.path}, ${file.length()}")
}
