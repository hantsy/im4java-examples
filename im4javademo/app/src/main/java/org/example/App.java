/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.im4java.core.ConvertCmd;
import org.im4java.core.IM4JavaException;
import org.im4java.core.IMOperation;
import org.im4java.process.Pipe;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
     public static byte[] optimizeAndResize(byte[] inputImage, int width, int height) throws IOException, InterruptedException {
        // Create command
        ConvertCmd cmd = new ConvertCmd();

        // Create the operation, add options
        IMOperation op = new IMOperation();
        op.addImage("-"); // input image from stdin
        op.resize(width, height);
        op.strip(); // remove profiles and comments
        op.addImage("-"); // output image to stdout

        // Prepare input and output pipes
        ByteArrayInputStream inputStream = new ByteArrayInputStream(inputImage);
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        Pipe pipeIn = new Pipe(inputStream, null);
        Pipe pipeOut = new Pipe(null, outputStream);

        // Set the pipes
        cmd.setInputProvider(pipeIn);
        cmd.setOutputConsumer(pipeOut);

        // Execute the operation
        try {
            cmd.run(op);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        return outputStream.toByteArray();
    }

    public static void main(String[] args) throws Exception {
        // Example usage
        byte[] inputImage = Files.readAllBytes(Paths.get("test.jpg")); // Load your image as byte array
        int width = 800;
        int height = 600;

        try {
            byte[] outputImage = optimizeAndResize(inputImage, width, height);
            
            Files.write(Paths.get("out.jpg"), outputImage);
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }
}
